// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GANDIVACACHE_GANDIVA_CACHE_H_
#define FLATBUFFERS_GENERATED_GANDIVACACHE_GANDIVA_CACHE_H_

#include "flatbuffers/flatbuffers.h"

namespace gandiva {
namespace cache {

struct Cache;

struct Cache FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECT_CODE = 4
  };
  const flatbuffers::Vector<int8_t> *object_code() const {
    return GetPointer<const flatbuffers::Vector<int8_t> *>(VT_OBJECT_CODE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBJECT_CODE) &&
           verifier.VerifyVector(object_code()) &&
           verifier.EndTable();
  }
};

struct CacheBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_object_code(flatbuffers::Offset<flatbuffers::Vector<int8_t>> object_code) {
    fbb_.AddOffset(Cache::VT_OBJECT_CODE, object_code);
  }
  explicit CacheBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CacheBuilder &operator=(const CacheBuilder &);
  flatbuffers::Offset<Cache> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Cache>(end);
    return o;
  }
};

inline flatbuffers::Offset<Cache> CreateCache(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<int8_t>> object_code = 0) {
  CacheBuilder builder_(_fbb);
  builder_.add_object_code(object_code);
  return builder_.Finish();
}

inline flatbuffers::Offset<Cache> CreateCacheDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int8_t> *object_code = nullptr) {
  auto object_code__ = object_code ? _fbb.CreateVector<int8_t>(*object_code) : 0;
  return gandiva::cache::CreateCache(
      _fbb,
      object_code__);
}

inline const gandiva::cache::Cache *GetCache(const void *buf) {
  return flatbuffers::GetRoot<gandiva::cache::Cache>(buf);
}

inline const gandiva::cache::Cache *GetSizePrefixedCache(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<gandiva::cache::Cache>(buf);
}

inline bool VerifyCacheBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<gandiva::cache::Cache>(nullptr);
}

inline bool VerifySizePrefixedCacheBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<gandiva::cache::Cache>(nullptr);
}

inline void FinishCacheBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<gandiva::cache::Cache> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCacheBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<gandiva::cache::Cache> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace cache
}  // namespace gandiva

#endif  // FLATBUFFERS_GENERATED_GANDIVACACHE_GANDIVA_CACHE_H_

// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GANDIVACACHEFILE_GANDIVA_CACHE_FBS_H_
#define FLATBUFFERS_GENERATED_GANDIVACACHEFILE_GANDIVA_CACHE_FBS_H_

#include "flatbuffers/flatbuffers.h"

namespace gandiva {
namespace cache {
namespace fbs {

struct SchemaExpressionsPair;

struct Cache;

struct SchemaExpressionsPair FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SCHEMA = 4,
    VT_EXPRS = 6
  };
  const flatbuffers::String *schema() const {
    return GetPointer<const flatbuffers::String *>(VT_SCHEMA);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *exprs() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_EXPRS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SCHEMA) &&
           verifier.VerifyString(schema()) &&
           VerifyOffset(verifier, VT_EXPRS) &&
           verifier.VerifyVector(exprs()) &&
           verifier.VerifyVectorOfStrings(exprs()) &&
           verifier.EndTable();
  }
};

struct SchemaExpressionsPairBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_schema(flatbuffers::Offset<flatbuffers::String> schema) {
    fbb_.AddOffset(SchemaExpressionsPair::VT_SCHEMA, schema);
  }
  void add_exprs(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> exprs) {
    fbb_.AddOffset(SchemaExpressionsPair::VT_EXPRS, exprs);
  }
  explicit SchemaExpressionsPairBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SchemaExpressionsPairBuilder &operator=(const SchemaExpressionsPairBuilder &);
  flatbuffers::Offset<SchemaExpressionsPair> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SchemaExpressionsPair>(end);
    return o;
  }
};

inline flatbuffers::Offset<SchemaExpressionsPair> CreateSchemaExpressionsPair(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> schema = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> exprs = 0) {
  SchemaExpressionsPairBuilder builder_(_fbb);
  builder_.add_exprs(exprs);
  builder_.add_schema(schema);
  return builder_.Finish();
}

inline flatbuffers::Offset<SchemaExpressionsPair> CreateSchemaExpressionsPairDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *schema = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *exprs = nullptr) {
  auto schema__ = schema ? _fbb.CreateString(schema) : 0;
  auto exprs__ = exprs ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*exprs) : 0;
  return gandiva::cache::fbs::CreateSchemaExpressionsPair(
      _fbb,
      schema__,
      exprs__);
}

struct Cache FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SCHEMA_EXPRS = 4,
    VT_OBJECT_CODE = 6
  };
  const SchemaExpressionsPair *schema_exprs() const {
    return GetPointer<const SchemaExpressionsPair *>(VT_SCHEMA_EXPRS);
  }
  const flatbuffers::String *object_code() const {
    return GetPointer<const flatbuffers::String *>(VT_OBJECT_CODE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SCHEMA_EXPRS) &&
           verifier.VerifyTable(schema_exprs()) &&
           VerifyOffset(verifier, VT_OBJECT_CODE) &&
           verifier.VerifyString(object_code()) &&
           verifier.EndTable();
  }
};

struct CacheBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_schema_exprs(flatbuffers::Offset<SchemaExpressionsPair> schema_exprs) {
    fbb_.AddOffset(Cache::VT_SCHEMA_EXPRS, schema_exprs);
  }
  void add_object_code(flatbuffers::Offset<flatbuffers::String> object_code) {
    fbb_.AddOffset(Cache::VT_OBJECT_CODE, object_code);
  }
  explicit CacheBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CacheBuilder &operator=(const CacheBuilder &);
  flatbuffers::Offset<Cache> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Cache>(end);
    return o;
  }
};

inline flatbuffers::Offset<Cache> CreateCache(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<SchemaExpressionsPair> schema_exprs = 0,
    flatbuffers::Offset<flatbuffers::String> object_code = 0) {
  CacheBuilder builder_(_fbb);
  builder_.add_object_code(object_code);
  builder_.add_schema_exprs(schema_exprs);
  return builder_.Finish();
}

inline flatbuffers::Offset<Cache> CreateCacheDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<SchemaExpressionsPair> schema_exprs = 0,
    const char *object_code = nullptr) {
  auto object_code__ = object_code ? _fbb.CreateString(object_code) : 0;
  return gandiva::cache::fbs::CreateCache(
      _fbb,
      schema_exprs,
      object_code__);
}

inline const gandiva::cache::fbs::Cache *GetCache(const void *buf) {
  return flatbuffers::GetRoot<gandiva::cache::fbs::Cache>(buf);
}

inline const gandiva::cache::fbs::Cache *GetSizePrefixedCache(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<gandiva::cache::fbs::Cache>(buf);
}

inline bool VerifyCacheBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<gandiva::cache::fbs::Cache>(nullptr);
}

inline bool VerifySizePrefixedCacheBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<gandiva::cache::fbs::Cache>(nullptr);
}

inline void FinishCacheBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<gandiva::cache::fbs::Cache> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCacheBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<gandiva::cache::fbs::Cache> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace fbs
}  // namespace cache
}  // namespace gandiva

#endif  // FLATBUFFERS_GENERATED_GANDIVACACHEFILE_GANDIVA_CACHE_FBS_H_
